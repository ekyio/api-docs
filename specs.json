{"_type":"export","__export_format":4,"__export_date":"2020-07-02T18:12:05.966Z","__export_source":"insomnia.desktop.app:v2020.2.2","resources":[{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c1dda937f","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"test\",\n  \"password\": \"123456\"\n}"},"created":1593713423107,"description":"","headers":[{"id":"pair_b080dabc32534480b9e6104b0ed2efeb","name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423107,"method":"POST","modified":1593713447274,"name":"Logs-in user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/login/","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","created":1593713423214,"description":"User Auth-Related Endpoints","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1593713423214,"modified":1593713423214,"name":"user","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"wrk_21d2d1e15002451db816890ccc89790c","created":1592350082771,"description":"A backend documentation file for Ekyio's Backend API.","modified":1593713423229,"name":"Ekyio's API 0.1.3","parentId":null,"scope":"spec","_type":"workspace"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c5757d1b8","authentication":{},"body":{},"created":1593713423105,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1593713423105,"method":"POST","modified":1593713423105,"name":"Logs-out user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/logout/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cbb084a3a","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"email\": \"example@example.com\"\n}"},"created":1593713423103,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423103,"method":"POST","modified":1593713423103,"name":"Sends an email to reset users password","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cd1d69b79","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"uid\": \"Ee54e8t7t8egfa\",\n  \"token\": \"523f2da371277259c4a0fe57cdb812a7caf43132\",\n  \"new_password1\": 123456,\n  \"new_password2\": 123456\n}"},"created":1593713423100,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423100,"method":"POST","modified":1593713423100,"name":"Confirms the token received by user to validate email","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset/confirm/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c97793a11","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"new_password1\": 222333444,\n  \"new_password2\": 222333444,\n  \"old_password\": 123456\n}"},"created":1593713423097,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423097,"method":"POST","modified":1593713423097,"name":"Changes user password using his old credentials","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/change/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c09c2e2e5","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"test1234\",\n  \"password1\": \"typeanotherpassword\",\n  \"password2\": \"typeanotherpassword\",\n  \"email\": \"anotheremail@example.com\"\n}"},"created":1593713423094,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423094,"method":"POST","modified":1593713423094,"name":"Registers a new user into the database","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c886d117e","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"key\": \"523f2da371277259c4a0fe57cdb812a7caf43132\"\n}"},"created":1593713423091,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1593713423091,"method":"POST","modified":1593713423091,"name":"Verifies email provided in the registration process","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration/verify-email/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cc21b4cf5","authentication":{},"body":{},"created":1593713423088,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1593713423088,"method":"GET","modified":1593713423088,"name":"Providers logged-in user data upon request","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/user/","_type":"request"},{"_id":"env_2d2152d5bd47a3afccb7a78afd596dda105b0b19","color":null,"created":1592350082814,"data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":null,"isPrivate":false,"metaSortKey":1592350082814,"modified":1593713423227,"name":"Base environment","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"environment"},{"_id":"jar_2d2152d5bd47a3afccb7a78afd596dda105b0b19","cookies":[{"creation":"2020-07-02T18:10:58.229Z","domain":"ekyio.com","expires":"1970-01-01T00:00:00.000Z","hostOnly":true,"id":"904518516443505","key":"sessionid","lastAccessed":"2020-07-02T18:11:18.092Z","maxAge":0,"path":"/","value":"\"\""}],"created":1593440247282,"modified":1593713478092,"name":"Default Jar","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"cookie_jar"},{"_id":"spc_fb7055efbe734b689d00309a80445f31","contentType":"yaml","contents":"openapi: 3.0.0\ninfo:\n  description: \"A backend documentation file for Ekyio's Backend API.\"\n  version: 0.1.3\n  title: Ekyio's API\n  contact:\n    email: rpg.gruber@gmail.com\ntags:\n  - name: user  \n    description: User Auth-Related Endpoints\n    security:\n      - bearerAuth: []   \n  - name: valkyries\n    description: An endpoint to manage the core information about valkyries\n  - name: weapons\n    description: A list of weapons for Valkyries\n  - name: stigmatas\n    description: Stigmatas equipments for Valkyries\n  - name: builds\n    description: Endpoint for manipulating builds\npaths:\n  ###################\n  ## AUTH\n  ###################\n  /rest-auth/login/:\n    post:\n      summary: Logs-in user\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/logout/:\n    post:\n      summary: Logs-out user\n      tags:\n        - user\n      description: Logs-out user.\n      responses:\n        \"200\":\n          description: Successfuly logged out.\n  /rest-auth/password/reset/:\n    post:\n      summary: Sends an email to reset users password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Email\"\n        description: Send a recovery email so the user can reset his password.\n        required: true\n      responses:\n        \"200\":\n          description: The reset email has been sent.\n  /rest-auth/password/reset/confirm/:\n    post:\n      summary: Confirms the token received by user to validate email\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n        description: Use the token provided by the reset email to generate a new password.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/password/change/:\n    post:\n      summary: Changes user password using his old credentials\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n        description: Change the user password within the API.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/registration/:\n    post:\n      summary: Registers a new user into the database\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Registration\"\n        description: User-Auth Registration endpoint.\n        required: true\n      responses:\n        \"201\":\n          description: Created. Returns the key/JWT value associated with your user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/registration/verify-email/:\n    post:\n      summary: Verifies email provided in the registration process\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Token\"\n        description: Verify user account using token sent to his email address.\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /rest-auth/user/:\n    get: \n      summary: Providers logged-in user data upon request\n      tags:\n        - user\n      description: User-Auth Registration endpoint.\n      required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  \n  ###################\n  ## VALKYRIES\n  ###################\n  /valkyries/:\n    get:\n      summary: Returns a list of valkyries\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: Returns a generic query of all Valkyries.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Valkyries\"\n    post:\n      summary: Adds a new valkyrie\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Valkyrie\"\n        description: The id is attributed once the request is completed.\n        required: true\n      responses:\n        \"200\":\n          description: Returns Valkyrie data plus its id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Valkyrie\"\n  /valkyries/{valkId}/:\n    get:\n      summary: Returns a specific valkyrie information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/valkId\"\n        description: pid value in JSON associated with the Valkyrie\n        required: true\n      responses:\n        \"200\":\n          description: Returns a JSON with Valkyrie data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Valkyrie\"\n    put:\n      summary: Updates a Valkyrie basic information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a Valkyrie entry\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/valkId\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}/card/:\n    get:\n      summary: Requests a valkyries card image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: Returns the image file associated to that Valkyrie ID\n        content:    # Can be image/png, image/svg, image/gif, etc.\n          schema:\n            image/*:\n              type: string\n              format: binary\n    post:\n      summary: Add/Replaces main card image \n      tags:\n        - valkyries\n      requestBody:\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n        description: Needs to be a valid .png or .jpeg\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /valkyries/{valkyId}/portrait/:\n    get:\n      summary: Requests a valkyries portrait image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the valkyries portrait image\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons:\n    get:\n      summary: Returns a list of weapons\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new weapon\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponID}:\n    get:\n      summary: Get data from a specific weapon using its Id\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a weapon information data\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a weapon from the database\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/mini:\n    get:\n      summary: Requests a weapon mini image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the mini weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/full:\n    get:\n      summary: Requests a weapon full image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the full weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  \n  /stigmatas:\n    get:\n      summary: Returns a list of stigmatas\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new stigmata\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}:\n    get:\n      summary: Get data from a specific stigmata using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a stigmata information data using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a stigmata from the database its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/mini:\n    get:\n      summary: Requests a stigmata mini image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata mini image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/full:\n    get:\n      summary: Requests a stigmata full image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata full image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds:\n    get:\n      summary: Returns a list of builds\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}:\n    get:\n      summary: Get data from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a build information\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a build from the database\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}/rating:\n    get:\n      summary: Get data a rating from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"              \n    post:\n      summary: Add a new rating to that specific build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"  \n  /builds/{buildID}/rating/reset:              \n    post:\n      summary: Reset rating for a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"                  \nservers:\n  - url: https://ekyio.com/api/\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n      # use the same name as above\n  schemas:\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          example: username\n        email:\n          type: string\n          example: example@example.com\n        password:\n          type: string\n          example: test123456\n    Token:\n      type: object\n      properties:\n        key:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n    Email:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example@example.com\n    valkId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    stigmataId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    weaponId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    PasswordReset:\n      type: object\n      properties:\n        uid:\n          type: string\n          example: Ee54e8t7t8egfa\n        token:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n        new_password1:\n          type: string\n          example: 123456\n        new_password2:\n          type: string\n          example: 123456\n    PasswordChange:\n      type: object\n      properties:\n        new_password1:\n          type: string\n          example: 222333444\n        new_password2:\n          type: string\n          example: 222333444\n        old_password:\n          type: string\n          example: 123456\n    Registration:\n      type: object\n      properties:\n        username:\n          type: string\n          example: test1234\n        password1:\n          type: string\n          example: typeanotherpassword\n        password2:\n          type: string\n          example: typeanotherpassword\n        email:\n          type: string\n          example: anotheremail@example.com\n    UserDetails:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example.com\n        first_name:\n          type: string\n        last_name:\n          type: string\n        pk:\n          type: integer\n          example: 23\n        username:\n          type: string\n          example: test\n    Features:\n      type: string\n      enum:\n        - Heavy Attack\n        - Time Fracture\n        - Shield Break\n        - Airbone\n        - Charge\n        - Paralyze\n        - Slow\n        - Freeze\n        - Lightning\n        - Impaired\n        - Weaken\n        - Stun\n        - Ice\n        - Fire\n        - Ignite\n        - Bleed\n        - Knockback\n        - Attract\n    Tier:\n      type: string\n      enum:\n        - B\n        - A\n        - S\n    DamageType:\n      type: string\n      enum:\n        - Quantum\n        - Mecha\n        - Psy\n        - Biologic\n    BaseStats:\n      type: object\n      properties:\n        HP:\n          type: integer\n          format: int64\n        ATK:\n          type: integer\n          format: int64\n        CRT:\n          type: integer\n          format: int64\n        SP:\n          type: integer\n          format: int64\n        DEF:\n          type: integer\n          format: int64\n    Valkyries:\n      type: object\n      required: \n        - Valkyrie\n      properties:\n        Valkyrie:\n          $ref: \"#/components/schemas/Valkyrie\"\n        Valkyrie2:\n          $ref: \"#/components/schemas/Valkyrie\"\n    Valkyrie:\n      type: object\n      required:\n        - longName\n        - shortName\n        - damageType\n        - features\n        - BaseTier\n        - BaseStats\n      properties:\n        id:\n          type: integer\n          format: int64\n        longName:\n          type: string\n        shortName:\n         type: string\n        damageType:\n          $ref: \"#/components/schemas/DamageType\"\n        features:\n          $ref: \"#/components/schemas/Features\"\n        BaseTier:\n          $ref: \"#/components/schemas/Tier\"\n        BaseStats:\n          $ref: \"#/components/schemas/BaseStats\"","created":1592350082772,"fileName":"Ekyio's API 0.0.1","modified":1593713423230,"parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"api_spec"},{"_id":"spc_4d420e3f747b4a7891c46185317cbe9c","contentType":"yaml","contents":"openapi: 3.0.0\ninfo:\n  description: \"A backend documentation file for Ekyio's Backend API.\"\n  version: 0.1.3\n  title: Ekyio's API\n  contact:\n    email: rpg.gruber@gmail.com\ntags:\n  - name: user  \n    description: User Auth-Related Endpoints\n    security:\n      - bearerAuth: []   \n  - name: valkyries\n    description: An endpoint to manage the core information about valkyries\n  - name: weapons\n    description: A list of weapons for Valkyries\n  - name: stigmatas\n    description: Stigmatas equipments for Valkyries\n  - name: builds\n    description: Endpoint for manipulating builds\npaths:\n  /rest-auth/login/:\n    post:\n      summary: Logs-in user\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/logout/:\n    post:\n      summary: Logs-out user\n      tags:\n        - user\n      description: Logs-out user.\n      responses:\n        \"200\":\n          description: Successfuly logged out.\n  /rest-auth/password/reset/:\n    post:\n      summary: Sends an email to reset users password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Email\"\n        description: Send a recovery email so the user can reset his password.\n        required: true\n      responses:\n        \"200\":\n          description: The reset email has been sent.\n  /rest-auth/password/reset/confirm/:\n    post:\n      summary: Confirms the token received by user to validate email\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n        description: Use the token provided by the reset email to generate a new password.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/password/change/:\n    post:\n      summary: Changes user password using his old credentials\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n        description: Change the user password within the API.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/registration/:\n    post:\n      summary: Registers a new user into the database\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Registration\"\n        description: User-Auth Registration endpoint.\n        required: true\n      responses:\n        \"201\":\n          description: Created. Returns the key/JWT value associated with your user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/registration/verify-email/:\n    post:\n      summary: Verifies email provided in the registration process\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Token\"\n        description: Verify user account using token sent to his email address.\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /rest-auth/user/:\n    get: \n      summary: Providers logged-in user data upon request\n      tags:\n        - user\n      description: User-Auth Registration endpoint.\n      required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /weapons/:\n    get:\n      summary: Returns a list of weapons\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new weapon\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponID}/:\n    get:\n      summary: Get data from a specific weapon using its Id\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a weapon information data\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a weapon from the database\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/mini/:\n    get:\n      summary: Requests a weapon mini image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the mini weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/full/:\n    get:\n      summary: Requests a weapon full image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the full weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkId}/:\n    get:\n      summary: Returns a specific valkyrie information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/:\n    get:\n      summary: Returns a list of valkyries\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new valkyrie\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}/:\n    put:\n      summary: Updates a Valkyrie basic information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a Valkyrie entry\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}/card/:\n    get:\n      summary: Requests a valkyries card image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Add/Replaces main card image \n      tags:\n        - valkyries\n      requestBody:\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /valkyries/{valkyId}/portrait/:\n    get:\n      summary: Requests a valkyries portrait image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the valkyries portrait image\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas:\n    get:\n      summary: Returns a list of stigmatas\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new stigmata\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}:\n    get:\n      summary: Get data from a specific stigmata using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a stigmata information data using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a stigmata from the database its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/mini:\n    get:\n      summary: Requests a stigmata mini image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata mini image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/full:\n    get:\n      summary: Requests a stigmata full image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata full image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds:\n    get:\n      summary: Returns a list of builds\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}:\n    get:\n      summary: Get data from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a build information\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a build from the database\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}/rating:\n    get:\n      summary: Get data a rating from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"              \n    post:\n      summary: Add a new rating to that specific build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"  \n  /builds/{buildID}/rating/reset:              \n    post:\n      summary: Reset rating for a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"                  \nservers:\n  - url: https://ekyio.com/api/\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n      # use the same name as above\n  schemas:\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          example: username\n        email:\n          type: string\n          example: example@example.com\n        password:\n          type: string\n          example: test123456\n    Token:\n      type: object\n      properties:\n        key:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n    Email:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example@example.com\n    valkId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    stigmataId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    weaponId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    PasswordReset:\n      type: object\n      properties:\n        uid:\n          type: string\n          example: Ee54e8t7t8egfa\n        token:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n        new_password1:\n          type: string\n          example: 123456\n        new_password2:\n          type: string\n          example: 123456\n    PasswordChange:\n      type: object\n      properties:\n        new_password1:\n          type: string\n          example: 222333444\n        new_password2:\n          type: string\n          example: 222333444\n        old_password:\n          type: string\n          example: 123456\n    Registration:\n      type: object\n      properties:\n        username:\n          type: string\n          example: test1234\n        password1:\n          type: string\n          example: typeanotherpassword\n        password2:\n          type: string\n          example: typeanotherpassword\n        email:\n          type: string\n          example: anotheremail@example.com\n    UserDetails:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example.com\n        first_name:\n          type: string\n        last_name:\n          type: string\n        pk:\n          type: integer\n          example: 23\n        username:\n          type: string\n          example: test\n    Features:\n      type: string\n      enum:\n        - Heavy Attack\n        - Time Fracture\n        - Shield Break\n        - Airbone\n        - Charge\n        - Paralyze\n        - Slow\n        - Freeze\n        - Lightning\n        - Impaired\n        - Weaken\n        - Stun\n        - Ice\n        - Fire\n        - Ignite\n        - Bleed\n        - Knockback\n        - Attract\n    Tier:\n      type: string\n      enum:\n        - B\n        - A\n        - S\n    DamageType:\n      type: string\n      enum:\n        - Quantum\n        - Mecha\n        - Psy\n        - Biologic\n    BaseStats:\n      type: object\n      properties:\n        HP:\n          type: integer\n          format: int64\n        ATK:\n          type: integer\n          format: int64\n        CRT:\n          type: integer\n          format: int64\n        SP:\n          type: integer\n          format: int64\n        DEF:\n          type: integer\n          format: int64\n    Valkyrie:\n      type: object\n      required:\n        - longName\n        - shortName\n        - damageType\n        - features\n        - BaseTier\n        - BaseStats\n      properties:\n        id:\n          type: integer\n          format: int64\n        longName:\n          type: string\n        shortName:\n         type: string\n        damageType:\n          $ref: \"#/components/schemas/DamageType\"\n        features:\n          $ref: \"#/components/schemas/Features\"\n        BaseTier:\n          $ref: \"#/components/schemas/Tier\"\n        BaseStats:\n          $ref: \"#/components/schemas/BaseStats\"","created":1593637562004,"fileName":"Ekyio's API 0.0.1","modified":1593663271634,"parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"api_spec"},{"_id":"env_env_2d2152d5bd47a3afccb7a78afd596dda105b0b19_sub","color":null,"created":1592350184555,"data":{"base_path":"/api","bearerToken":"bearerToken","host":"ekyio.com","scheme":"https"},"dataPropertyOrder":{"&":["base_path","bearerToken","host","scheme"]},"isPrivate":false,"metaSortKey":1592350184555,"modified":1593713423225,"name":"OpenAPI env","parentId":"env_2d2152d5bd47a3afccb7a78afd596dda105b0b19","_type":"environment"}]}