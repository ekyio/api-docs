{"_type":"export","__export_format":4,"__export_date":"2020-07-02T01:34:12.565Z","__export_source":"insomnia.desktop.app:v2020.2.2","resources":[{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c3ec3d562","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788220,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788220,"method":"POST","modified":1593652430142,"name":"Logs-in user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/login","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","created":1592350184527,"description":"User Auth-Related Endpoints","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1592533788558,"modified":1593652430408,"name":"user","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"wrk_21d2d1e15002451db816890ccc89790c","created":1592350082771,"description":"A backend documentation file for Ekyio's Backend API.","modified":1593652430437,"name":"Ekyio's API 0.0.1","parentId":null,"scope":"spec","_type":"workspace"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cbe1981dc","authentication":{},"body":{},"created":1592533788208,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788208,"method":"POST","modified":1593652430129,"name":"Logs-out user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/logout","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c12833b32","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"email\": \"example@example.com\"\n}"},"created":1592533788197,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788197,"method":"POST","modified":1593652430115,"name":"Sends an email to reset users password","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c0cac4912","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"uid\": \"Ee54e8t7t8egfa\",\n  \"token\": \"523f2da371277259c4a0fe57cdb812a7caf43132\",\n  \"new_password1\": 123456,\n  \"new_password2\": 123456\n}"},"created":1592533788184,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788184,"method":"POST","modified":1593652430099,"name":"Confirms the token received by user to validate email","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset/confirm","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cfe14eefa","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"new_password1\": 222333444,\n  \"new_password2\": 222333444,\n  \"old_password\": 123456\n}"},"created":1592533788175,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788175,"method":"POST","modified":1593652430087,"name":"Changes user password using his old credentials","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/change","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790ceb0a6077","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"test1234\",\n  \"password1\": \"typeanotherpassword\",\n  \"password2\": \"typeanotherpassword\",\n  \"email\": \"anotheremail@example.com\"\n}"},"created":1592533788163,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788163,"method":"POST","modified":1593652430078,"name":"Registers a new user into the database","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c8afffe8d","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"key\": \"523f2da371277259c4a0fe57cdb812a7caf43132\"\n}"},"created":1592533788151,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788151,"method":"POST","modified":1593652430065,"name":"Verifies email provided in the registration process","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration/verify-email","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c2ed786b1","authentication":{},"body":{},"created":1592533788135,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788135,"method":"GET","modified":1593652430053,"name":"Providers logged-in user data upon request","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/user","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cfe3d55d0","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"},"created":1592428742810,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592428742810,"method":"POST","modified":1592428742810,"name":"Create user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c4cb83333","authentication":{},"body":{"mimeType":"application/json","text":"[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"},"created":1592428742803,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592428742803,"method":"POST","modified":1592428742803,"name":"Creates list of users with given input array","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/createWithArray","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790ce94a615f","authentication":{},"body":{"mimeType":"application/json","text":"[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"},"created":1592428742796,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592428742796,"method":"POST","modified":1592428742796,"name":"Creates list of users with given input array","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/createWithList","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c00ac9da2","authentication":{},"body":{},"created":1592428742789,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592428742789,"method":"GET","modified":1592428742789,"name":"Logs user into the system","parameters":[{"disabled":false,"name":"username","value":"string"},{"disabled":false,"name":"password","value":"string"}],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/login","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c740025cb","authentication":{},"body":{},"created":1592428742783,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592428742783,"method":"GET","modified":1592428742783,"name":"Logs out current logged in user session","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/logout","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c74f1d1d1","authentication":{},"body":{},"created":1592428742777,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592428742777,"method":"GET","modified":1592428742777,"name":"Get user by user name","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/{{ username }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c6d74493f","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"},"created":1592428742770,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592428742770,"method":"PUT","modified":1592428742770,"name":"Updated user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/{{ username }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c38e8e88f","authentication":{},"body":{},"created":1592428742762,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592428742762,"method":"DELETE","modified":1592428742762,"name":"Delete user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/user/{{ username }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c886d117e","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"key\": \"523f2da371277259c4a0fe57cdb812a7caf43132\"\n}"},"created":1592411720060,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592411720060,"method":"POST","modified":1592501822598,"name":"Verifies email provided in the registration process","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration/verify-email/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cc21b4cf5","authentication":{},"body":{},"created":1592411720049,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592411720049,"method":"GET","modified":1592501822590,"name":"Providers logged-in user data upon request","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/user/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c1dda937f","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592360762411,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592360762411,"method":"POST","modified":1592501822635,"name":"Logs-in user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/login/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c5757d1b8","authentication":{},"body":{},"created":1592360762403,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592360762403,"method":"POST","modified":1592501822629,"name":"Logs-out user","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/logout/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cbb084a3a","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"email\": \"example@example.com\"\n}"},"created":1592360762394,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592360762394,"method":"POST","modified":1592501822623,"name":"Sends an email to reset users password","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cd1d69b79","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"uid\": \"Ee54e8t7t8egfa\",\n  \"token\": \"523f2da371277259c4a0fe57cdb812a7caf43132\",\n  \"new_password1\": 123456,\n  \"new_password2\": 123456\n}"},"created":1592360762386,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592360762386,"method":"POST","modified":1592501822617,"name":"Confirms the token received by user to validate email","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/reset/confirm/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c97793a11","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"new_password1\": 222333444,\n  \"new_password2\": 222333444,\n  \"old_password\": 123456\n}"},"created":1592360762378,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592360762378,"method":"POST","modified":1592501822611,"name":"Changes user password using his old credentials","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/password/change/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c09c2e2e5","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"test1234\",\n  \"password1\": \"typeanotherpassword\",\n  \"password2\": \"typeanotherpassword\",\n  \"email\": \"anotheremail@example.com\"\n}"},"created":1592360762369,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592360762369,"method":"POST","modified":1592501822605,"name":"Registers a new user into the database","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c12dea96f","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/rest-auth/registration/","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c2dcfea75","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788336,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788336,"method":"GET","modified":1593652430258,"name":"Returns a specific valkyrie information","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkId }}","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","created":1592501822654,"description":"An endpoint to manage the core information about valkyries","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1592533788533,"modified":1593652430395,"name":"valkyries","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c2654019a","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788325,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788325,"method":"GET","modified":1593652430244,"name":"Returns a list of valkyries","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cb929920e","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788315,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788315,"method":"POST","modified":1593652430233,"name":"Adds a new valkyrie","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c1e5ebb2c","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788301,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788301,"method":"PUT","modified":1593652430221,"name":"Updates a Valkyrie basic information","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c3a3e6c0d","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788288,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788288,"method":"DELETE","modified":1593652430210,"name":"Removes a Valkyrie entry","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c3e30674b","authentication":{},"body":{},"created":1592533788272,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788272,"method":"GET","modified":1593652430199,"name":"Requests a valkyries card image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}/card","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cb09ab5d8","authentication":{},"body":{"mimeType":"image/*"},"created":1592533788263,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788263,"method":"POST","modified":1593652430187,"name":"Add/Replaces main card image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}/card","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c12647f68","authentication":{},"body":{},"created":1592533788247,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788247,"method":"GET","modified":1593652430169,"name":"Requests a valkyries portrait image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}/portrait","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c017900bc","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788234,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788234,"method":"POST","modified":1593652430152,"name":"Adds/Replaces the valkyries portrait image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790cfa71e8a4","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/valkyries/{{ valkyId }}/portrait","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c9ec48ab5","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788040,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788040,"method":"GET","modified":1593652429964,"name":"Returns a list of builds","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","created":1592533788493,"description":"Endpoint for manipulating builds","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1592533788520.5,"modified":1593652430363,"name":"builds","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cbce1f33d","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788033,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788033,"method":"POST","modified":1593652429959,"name":"Adds a new build","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c19650149","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788025,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788025,"method":"GET","modified":1593652429952,"name":"Get data from a specific build by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c718b29f1","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788019,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788019,"method":"PUT","modified":1593652429946,"name":"Updates a build information","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c22328963","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788011,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788011,"method":"DELETE","modified":1593652429939,"name":"Removes a build from the database","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c4d47078b","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788004,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788004,"method":"GET","modified":1593652429932,"name":"Get data a rating from a specific build by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}/rating","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790ccc13bda0","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533787998,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533787998,"method":"POST","modified":1593652429925,"name":"Add a new rating to that specific build","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}/rating","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cf242b0b3","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533787990,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533787990,"method":"POST","modified":1593652429917,"name":"Reset rating for a specific build by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c3b6faa5c","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/builds/{{ buildID }}/rating/reset","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c76c27c6f","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788480,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788480,"method":"GET","modified":1593652430355,"name":"Returns a list of weapons","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","created":1592501822647,"description":"A list of weapons for Valkyries","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1592501822647,"modified":1593652430381,"name":"weapons","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c089ad275","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788466,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788467,"method":"POST","modified":1593652430344,"name":"Adds a new weapon","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c73f4d29a","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788449,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788449,"method":"GET","modified":1593652430331,"name":"Get data from a specific weapon using its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790ce7c5cd9a","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788421,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788421,"method":"PUT","modified":1593652430313,"name":"Updates a weapon information data","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790ca8347854","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788404,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788404,"method":"DELETE","modified":1593652430305,"name":"Removes a weapon from the database","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponID }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cdea01ac8","authentication":{},"body":{},"created":1592533788384,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788384,"method":"GET","modified":1593652430295,"name":"Requests a weapon mini image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponId }}/mini","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cf44b2497","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788369,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788369,"method":"POST","modified":1593652430288,"name":"Adds/Replaces the mini weapon image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponId }}/mini","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c7d3c5076","authentication":{},"body":{},"created":1592533788359,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788359,"method":"GET","modified":1593652430280,"name":"Requests a weapon full image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponId }}/full","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cbe499449","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788349,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788349,"method":"POST","modified":1593652430272,"name":"Adds/Replaces the full weapon image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c5f014482","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/weapons/{{ weaponId }}/full","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c2439deba","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788117,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788117,"method":"GET","modified":1593652430042,"name":"Returns a list of stigmatas","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas","_type":"request"},{"_id":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","created":1592533788508,"description":"Stigmatas equipments for Valkyries","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1592501822644.5,"modified":1593652430371,"name":"stigmatas","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"request_group"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cf709d342","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788104,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788104,"method":"POST","modified":1593652430031,"name":"Adds a new stigmata","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c556fc384","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788093,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788093,"method":"GET","modified":1593652430019,"name":"Get data from a specific stigmata using its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cb4db6398","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788082,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788082,"method":"PUT","modified":1593652430008,"name":"Updates a stigmata information data using its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c16d8cb9c","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788071,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788071,"method":"DELETE","modified":1593652430001,"name":"Removes a stigmata from the database its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c39fd3606","authentication":{},"body":{},"created":1592533788066,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788066,"method":"GET","modified":1593652429993,"name":"Requests a stigmata mini image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}/mini","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cda439a9e","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788060,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788060,"method":"POST","modified":1593652429984,"name":"Adds/Replaces the stigmata mini image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}/mini","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790cdd56b4e8","authentication":{},"body":{},"created":1592533788053,"description":"","headers":[],"isPrivate":false,"metaSortKey":-1592533788053,"method":"GET","modified":1593652429976,"name":"Requests a stigmata full image by its Id","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}/full","_type":"request"},{"_id":"req_wrk_21d2d1e15002451db816890ccc89790c9f4d2b5d","authentication":{},"body":{"mimeType":"application/json","text":"{\n  \"username\": \"username\",\n  \"email\": \"example@example.com\",\n  \"password\": \"test123456\"\n}"},"created":1592533788047,"description":"","headers":[{"name":"Content-Type","value":"application/json"}],"isPrivate":false,"metaSortKey":-1592533788047,"method":"POST","modified":1593652429970,"name":"Adds/Replaces the stigmata full image","parameters":[],"parentId":"fld_wrk_21d2d1e15002451db816890ccc89790c9eed0dec","settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingFollowRedirects":"global","settingRebuildPath":true,"settingSendCookies":true,"settingStoreCookies":true,"url":"{{ base_url }}/stigmatas/{{ stigmataId }}/full","_type":"request"},{"_id":"env_2d2152d5bd47a3afccb7a78afd596dda105b0b19","color":null,"created":1592350082814,"data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":null,"isPrivate":false,"metaSortKey":1592350082814,"modified":1593652430428,"name":"Base environment","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"environment"},{"_id":"jar_2d2152d5bd47a3afccb7a78afd596dda105b0b19","cookies":[],"created":1593440247282,"modified":1593440247282,"name":"Default Jar","parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"cookie_jar"},{"_id":"spc_fb7055efbe734b689d00309a80445f31","contentType":"yaml","contents":"openapi: 3.0.0\ninfo:\n  description: \"A backend documentation file for Ekyio's Backend API.\"\n  version: 0.0.1\n  title: Ekyio's API\n  contact:\n    email: rpg.gruber@gmail.com\ntags:\n  - name: user\n    description: User Auth-Related Endpoints\n    security:\n      - bearerAuth: []   \n  - name: valkyries\n    description: An endpoint to manage the core information about valkyries\n  - name: weapons\n    description: A list of weapons for Valkyries\n  - name: stigmatas\n    description: Stigmatas equipments for Valkyries\n  - name: builds\n    description: Endpoint for manipulating builds\npaths:\n  /weapons:\n    get:\n      summary: Returns a list of weapons\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new weapon\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponID}:\n    get:\n      summary: Get data from a specific weapon using its Id\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a weapon information data\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a weapon from the database\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/mini:\n    get:\n      summary: Requests a weapon mini image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the mini weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/full:\n    get:\n      summary: Requests a weapon full image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the full weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkId}:\n    get:\n      summary: Returns a specific valkyrie information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries:\n    get:\n      summary: Returns a list of valkyries\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new valkyrie\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}:\n    put:\n      summary: Updates a Valkyrie basic information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a Valkyrie entry\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}/card:\n    get:\n      summary: Requests a valkyries card image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Add/Replaces main card image \n      tags:\n        - valkyries\n      requestBody:\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /valkyries/{valkyId}/portrait:\n    get:\n      summary: Requests a valkyries portrait image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the valkyries portrait image\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/login:\n    post:\n      summary: Logs-in user\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/logout:\n    post:\n      summary: Logs-out user\n      tags:\n        - user\n      description: Logs-out user.\n      responses:\n        \"200\":\n          description: Successfuly logged out.\n  /rest-auth/password/reset:\n    post:\n      summary: Sends an email to reset users password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Email\"\n        description: Send a recovery email so the user can reset his password.\n        required: true\n      responses:\n        \"200\":\n          description: The reset email has been sent.\n  /rest-auth/password/reset/confirm:\n    post:\n      summary: Confirms the token received by user to validate email\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n        description: Use the token provided by the reset email to generate a new password.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/password/change:\n    post:\n      summary: Changes user password using his old credentials\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n        description: Change the user password within the API.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/registration:\n    post:\n      summary: Registers a new user into the database\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Registration\"\n        description: User-Auth Registration endpoint.\n        required: true\n      responses:\n        \"201\":\n          description: Created. Returns the key/JWT value associated with your user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/registration/verify-email:\n    post:\n      summary: Verifies email provided in the registration process\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Token\"\n        description: Verify user account using token sent to his email address.\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /rest-auth/user:\n    get: \n      summary: Providers logged-in user data upon request\n      tags:\n        - user\n      description: User-Auth Registration endpoint.\n      required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /stigmatas:\n    get:\n      summary: Returns a list of stigmatas\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new stigmata\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}:\n    get:\n      summary: Get data from a specific stigmata using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a stigmata information data using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a stigmata from the database its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/mini:\n    get:\n      summary: Requests a stigmata mini image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata mini image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/full:\n    get:\n      summary: Requests a stigmata full image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata full image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds:\n    get:\n      summary: Returns a list of builds\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}:\n    get:\n      summary: Get data from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a build information\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a build from the database\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}/rating:\n    get:\n      summary: Get data a rating from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"              \n    post:\n      summary: Add a new rating to that specific build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"  \n  /builds/{buildID}/rating/reset:              \n    post:\n      summary: Reset rating for a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"                  \nservers:\n  - url: https://ekyio/api\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n      # use the same name as above\n  schemas:\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          example: username\n        email:\n          type: string\n          example: example@example.com\n        password:\n          type: string\n          example: test123456\n    Token:\n      type: object\n      properties:\n        key:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n    Email:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example@example.com\n    valkId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    stigmataId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    weaponId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    PasswordReset:\n      type: object\n      properties:\n        uid:\n          type: string\n          example: Ee54e8t7t8egfa\n        token:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n        new_password1:\n          type: string\n          example: 123456\n        new_password2:\n          type: string\n          example: 123456\n    PasswordChange:\n      type: object\n      properties:\n        new_password1:\n          type: string\n          example: 222333444\n        new_password2:\n          type: string\n          example: 222333444\n        old_password:\n          type: string\n          example: 123456\n    Registration:\n      type: object\n      properties:\n        username:\n          type: string\n          example: test1234\n        password1:\n          type: string\n          example: typeanotherpassword\n        password2:\n          type: string\n          example: typeanotherpassword\n        email:\n          type: string\n          example: anotheremail@example.com\n    UserDetails:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example.com\n        first_name:\n          type: string\n        last_name:\n          type: string\n        pk:\n          type: integer\n          example: 23\n        username:\n          type: string\n          example: test\n    Features:\n      type: string\n      enum:\n        - Heavy Attack\n        - Time Fracture\n        - Shield Break\n        - Airbone\n        - Charge\n        - Paralyze\n        - Slow\n        - Freeze\n        - Lightning\n        - Impaired\n        - Weaken\n        - Stun\n        - Ice\n        - Fire\n        - Ignite\n        - Bleed\n        - Knockback\n        - Attract\n    Tier:\n      type: string\n      enum:\n        - B\n        - A\n        - S\n    DamageType:\n      type: string\n      enum:\n        - Quantum\n        - Mecha\n        - Psy\n        - Biologic\n    BaseStats:\n      type: object\n      properties:\n        HP:\n          type: integer\n          format: int64\n        ATK:\n          type: integer\n          format: int64\n        CRT:\n          type: integer\n          format: int64\n        SP:\n          type: integer\n          format: int64\n        DEF:\n          type: integer\n          format: int64\n    Valkyrie:\n      type: object\n      required:\n        - longName\n        - shortName\n        - damageType\n        - features\n        - BaseTier\n        - BaseStats\n      properties:\n        id:\n          type: integer\n          format: int64\n        longName:\n          type: string\n        shortName:\n         type: string\n        damageType:\n          $ref: \"#/components/schemas/DamageType\"\n        features:\n          $ref: \"#/components/schemas/Features\"\n        BaseTier:\n          $ref: \"#/components/schemas/Tier\"\n        BaseStats:\n          $ref: \"#/components/schemas/BaseStats\"","created":1592350082772,"fileName":"Ekyio's API 0.0.1","modified":1593652430449,"parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"api_spec"},{"_id":"spc_4d420e3f747b4a7891c46185317cbe9c","contentType":"yaml","contents":"openapi: 3.0.0\ninfo:\n  description: \"A backend documentation file for Ekyio's Backend API.\"\n  version: 0.0.1\n  title: Ekyio's API\n  contact:\n    email: rpg.gruber@gmail.com\ntags:\n  - name: user  \n    description: User Auth-Related Endpoints\n    security:\n      - bearerAuth: []   \n  - name: valkyries\n    description: An endpoint to manage the core information about valkyries\n  - name: weapons\n    description: A list of weapons for Valkyries\n  - name: stigmatas\n    description: Stigmatas equipments for Valkyries\n  - name: builds\n    description: Endpoint for manipulating builds\npaths:\n  /weapons:\n    get:\n      summary: Returns a list of weapons\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new weapon\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponID}:\n    get:\n      summary: Get data from a specific weapon using its Id\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a weapon information data\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a weapon from the database\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/mini:\n    get:\n      summary: Requests a weapon mini image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the mini weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /weapons/{weaponId}/full:\n    get:\n      summary: Requests a weapon full image by its Id\n      tags:\n        - weapons\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the full weapon image\n      tags:\n        - weapons\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkId}:\n    get:\n      summary: Returns a specific valkyrie information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries:\n    get:\n      summary: Returns a list of valkyries\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new valkyrie\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}:\n    put:\n      summary: Updates a Valkyrie basic information\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a Valkyrie entry\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /valkyries/{valkyId}/card:\n    get:\n      summary: Requests a valkyries card image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Add/Replaces main card image \n      tags:\n        - valkyries\n      requestBody:\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /valkyries/{valkyId}/portrait:\n    get:\n      summary: Requests a valkyries portrait image by its Id\n      tags:\n        - valkyries\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the valkyries portrait image\n      tags:\n        - valkyries\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/login/:\n    post:\n      summary: Logs-in user\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/logout:\n    post:\n      summary: Logs-out user\n      tags:\n        - user\n      description: Logs-out user.\n      responses:\n        \"200\":\n          description: Successfuly logged out.\n  /rest-auth/password/reset:\n    post:\n      summary: Sends an email to reset users password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Email\"\n        description: Send a recovery email so the user can reset his password.\n        required: true\n      responses:\n        \"200\":\n          description: The reset email has been sent.\n  /rest-auth/password/reset/confirm:\n    post:\n      summary: Confirms the token received by user to validate email\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordReset\"\n        description: Use the token provided by the reset email to generate a new password.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/password/change:\n    post:\n      summary: Changes user password using his old credentials\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n        description: Change the user password within the API.\n        required: true\n      responses:\n        \"200\":\n          description: Your password has been sucessfully updated.\n  /rest-auth/registration:\n    post:\n      summary: Registers a new user into the database\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Registration\"\n        description: User-Auth Registration endpoint.\n        required: true\n      responses:\n        \"201\":\n          description: Created. Returns the key/JWT value associated with your user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /rest-auth/registration/verify-email:\n    post:\n      summary: Verifies email provided in the registration process\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Token\"\n        description: Verify user account using token sent to his email address.\n        required: true\n      responses:\n        \"200\":\n          description: OK.\n  /rest-auth/user:\n    get: \n      summary: Providers logged-in user data upon request\n      tags:\n        - user\n      description: User-Auth Registration endpoint.\n      required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /stigmatas:\n    get:\n      summary: Returns a list of stigmatas\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new stigmata\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}:\n    get:\n      summary: Get data from a specific stigmata using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a stigmata information data using its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a stigmata from the database its Id\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/mini:\n    get:\n      summary: Requests a stigmata mini image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata mini image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /stigmatas/{stigmataId}/full:\n    get:\n      summary: Requests a stigmata full image by its Id\n      tags:\n        - stigmatas\n      responses:\n        \"200\":\n          description: OK.\n        content:\n          image/*:    # Can be image/png, image/svg, image/gif, etc.\n            schema:\n              type: string\n              format: binary\n    post:\n      summary: Adds/Replaces the stigmata full image\n      tags:\n        - stigmatas\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds:\n    get:\n      summary: Returns a list of builds\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    post:\n      summary: Adds a new build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}:\n    get:\n      summary: Get data from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    put:\n      summary: Updates a build information\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      summary: Removes a build from the database\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n  /builds/{buildID}/rating:\n    get:\n      summary: Get data a rating from a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"              \n    post:\n      summary: Add a new rating to that specific build\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"  \n  /builds/{buildID}/rating/reset:              \n    post:\n      summary: Reset rating for a specific build by its Id\n      tags:\n        - builds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Username and password\n        required: true\n      responses:\n        \"200\":\n          description: User logged-in, returns a JWT key.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"                  \nservers:\n  - url: https://ekyio.com/api/\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n      # use the same name as above\n  schemas:\n    User:\n      type: object\n      properties:\n        username:\n          type: string\n          example: username\n        email:\n          type: string\n          example: example@example.com\n        password:\n          type: string\n          example: test123456\n    Token:\n      type: object\n      properties:\n        key:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n    Email:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example@example.com\n    valkId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    stigmataId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    weaponId:\n      type: object\n      properties:\n        pid:\n          type: integer\n          example: 21\n    PasswordReset:\n      type: object\n      properties:\n        uid:\n          type: string\n          example: Ee54e8t7t8egfa\n        token:\n          type: string\n          example: 523f2da371277259c4a0fe57cdb812a7caf43132\n        new_password1:\n          type: string\n          example: 123456\n        new_password2:\n          type: string\n          example: 123456\n    PasswordChange:\n      type: object\n      properties:\n        new_password1:\n          type: string\n          example: 222333444\n        new_password2:\n          type: string\n          example: 222333444\n        old_password:\n          type: string\n          example: 123456\n    Registration:\n      type: object\n      properties:\n        username:\n          type: string\n          example: test1234\n        password1:\n          type: string\n          example: typeanotherpassword\n        password2:\n          type: string\n          example: typeanotherpassword\n        email:\n          type: string\n          example: anotheremail@example.com\n    UserDetails:\n      type: object\n      properties:\n        email:\n          type: string\n          example: example.com\n        first_name:\n          type: string\n        last_name:\n          type: string\n        pk:\n          type: integer\n          example: 23\n        username:\n          type: string\n          example: test\n    Features:\n      type: string\n      enum:\n        - Heavy Attack\n        - Time Fracture\n        - Shield Break\n        - Airbone\n        - Charge\n        - Paralyze\n        - Slow\n        - Freeze\n        - Lightning\n        - Impaired\n        - Weaken\n        - Stun\n        - Ice\n        - Fire\n        - Ignite\n        - Bleed\n        - Knockback\n        - Attract\n    Tier:\n      type: string\n      enum:\n        - B\n        - A\n        - S\n    DamageType:\n      type: string\n      enum:\n        - Quantum\n        - Mecha\n        - Psy\n        - Biologic\n    BaseStats:\n      type: object\n      properties:\n        HP:\n          type: integer\n          format: int64\n        ATK:\n          type: integer\n          format: int64\n        CRT:\n          type: integer\n          format: int64\n        SP:\n          type: integer\n          format: int64\n        DEF:\n          type: integer\n          format: int64\n    Valkyrie:\n      type: object\n      required:\n        - longName\n        - shortName\n        - damageType\n        - features\n        - BaseTier\n        - BaseStats\n      properties:\n        id:\n          type: integer\n          format: int64\n        longName:\n          type: string\n        shortName:\n         type: string\n        damageType:\n          $ref: \"#/components/schemas/DamageType\"\n        features:\n          $ref: \"#/components/schemas/Features\"\n        BaseTier:\n          $ref: \"#/components/schemas/Tier\"\n        BaseStats:\n          $ref: \"#/components/schemas/BaseStats\"","created":1593637562004,"fileName":"Ekyio's API 0.0.1","modified":1593653127866,"parentId":"wrk_21d2d1e15002451db816890ccc89790c","_type":"api_spec"},{"_id":"env_env_2d2152d5bd47a3afccb7a78afd596dda105b0b19_sub","color":null,"created":1592350184555,"data":{"base_path":"/api","bearerToken":"bearerToken","host":"ekyio","scheme":"https"},"dataPropertyOrder":null,"isPrivate":false,"metaSortKey":1592350184555,"modified":1593652430417,"name":"OpenAPI env","parentId":"env_2d2152d5bd47a3afccb7a78afd596dda105b0b19","_type":"environment"}]}